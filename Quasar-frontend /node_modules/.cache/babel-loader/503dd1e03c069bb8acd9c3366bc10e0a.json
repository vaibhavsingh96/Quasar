{"ast":null,"code":"/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.5.2';\n/**\n * @deprecated use lowercase `version`.\n */\n\nconst VERSION = version;\n\nconst _hasatob = typeof atob === 'function';\n\nconst _hasbtoa = typeof btoa === 'function';\n\nconst _hasBuffer = typeof Buffer === 'function';\n\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\n\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\n\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\n\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\n\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nconst _fromCC = String.fromCharCode.bind(String);\n\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : (it, fn = x => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\n\nconst _mkUriSafe = src => src.replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_').replace(/=+$/m, '');\n\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\n\n\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n      c0,\n      c1,\n      c2,\n      asc = '';\n  const pad = bin.length % 3;\n\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\n\n\nconst _btoa = _hasbtoa ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\n\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\n\n\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a); // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\n\n\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\n\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\n\nconst utob = u => u.replace(re_utob, cb_utob); //\n\n\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\n\n\nconst encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\n\n\nconst encodeURI = src => encode(src, true); // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\n\n\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n          offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\n\n\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\n\n\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n      bin = '',\n      r1,\n      r2;\n\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\n\n\nconst _atob = _hasatob ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill; //\n\n\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\n\n\nconst toUint8Array = a => _toUint8Array(_unURI(a)); //\n\n\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\n\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\n\n\nconst decode = src => _decode(_unURI(src)); //\n\n\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\n\n\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\n\n\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\n\n\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\n\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n}; // makecjs:CUT //\n\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins }; // and finally,\n\nexport { gBase64 as Base64 };","map":{"version":3,"sources":["/Users/vv/Desktop/Quasar/Quasar-frontend /node_modules/js-base64/base64.mjs"],"names":["version","VERSION","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","Buffer","_TD","TextDecoder","undefined","_TE","TextEncoder","b64ch","b64chs","b64tab","a","tab","forEach","c","i","b64re","_fromCC","String","fromCharCode","bind","_U8Afrom","Uint8Array","from","it","fn","x","Array","prototype","slice","call","map","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","length","charCodeAt","TypeError","substring","_btoa","toString","_fromUint8Array","u8a","maxargs","strs","l","push","apply","subarray","join","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","cp","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","name","body","Object","defineProperty","extendUint8Array","extendBuiltins","gBase64","fromBase64","toBase64","encodeURL","Base64"],"mappings":"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","sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.5.2';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_')\n    .replace(/=+$/m, '');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n"]},"metadata":{},"sourceType":"module"}